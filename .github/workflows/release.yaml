name: release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

env:
  PROJECT: tcping

jobs:
  build:
    name: build-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true

          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            use-cross: true

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use-cross: true

          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use-cross: true

          - os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false

          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false

          - os: windows-latest
            target: x86_64-pc-windows-gnu
            use-cross: false

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set version
        id: version
        shell: bash
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "PROJECT_VERSION=${VERSION}" >> "$GITHUB_ENV"
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup native compilation
        if: ${{ matrix.use-cross == false }}
        shell: bash
        run: echo "CARGO=cargo" >> "$GITHUB_ENV"

      - name: Setup cross compilation
        if: ${{ matrix.use-cross == true }}
        shell: bash
        run: |
          dir="$RUNNER_TEMP/cross"
          mkdir -p "$dir"
          echo "$dir" >> "$GITHUB_PATH"
          cd "$dir"
          curl -LSf -o cross.tar.gz \
            https://github.com/cross-rs/cross/releases/download/v0.2.5/cross-x86_64-unknown-linux-musl.tar.gz
          tar xf cross.tar.gz
          echo "CARGO=cross" >> "$GITHUB_ENV"
          echo "RUSTFLAGS=--cfg ${{ env.PROJECT }}" >> "$GITHUB_ENV"
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> "$GITHUB_ENV"

      - name: Build
        shell: bash
        run: |
          : "${CARGO:=cargo}"
          $CARGO build --release --target ${{ matrix.target }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "BIN_NAME=${{ env.PROJECT }}.exe" >> "$GITHUB_ENV"
          else
            echo "BIN_NAME=${{ env.PROJECT }}" >> "$GITHUB_ENV"
          fi

      - name: Package archive
        shell: bash
        run: |
          staging="${{ env.PROJECT }}-${{ env.PROJECT_VERSION }}-${{ matrix.target }}"
          mkdir "$staging"
          cp README.md LICENSE "$staging/"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
            7z a "$staging.zip" "$staging" >/dev/null
            echo "ASSET=$staging.zip" >> "$GITHUB_ENV"
          else
            cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> "$GITHUB_ENV"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.ASSET }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for changelog)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: version
        shell: bash
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "PROJECT_VERSION=${VERSION}" >> "$GITHUB_ENV"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Generate changelog
        uses: orhun/git-cliff-action@v4
        id: cliff
        with:
          config: cliff.toml
          args: --latest --tag ${{ steps.version.outputs.VERSION }} --strip header
        env:
          OUTPUT: RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Tcping ${{ steps.version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
